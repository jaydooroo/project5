        -:    0:Source:/users/guest/e/ejh612/tmp/tmp.60y5MWDIxy/main.cpp
        -:    0:Graph:/users/guest/e/ejh612/tmp/tmp.60y5MWDIxy/cmake-build-debug-coverage/CMakeFiles/project4.dir/main.cpp.gcno
        -:    0:Data:/users/guest/e/ejh612/tmp/tmp.60y5MWDIxy/cmake-build-debug-coverage/CMakeFiles/project4.dir/main.cpp.gcda
        -:    0:Runs:1
        -:    1:#include "Lexer.h"
        -:    2:#include <fstream>
        -:    3:#include <iostream>
        -:    4:#include <vector>
        -:    5:#include "Parser.h"
        -:    6:#include "Interpreter.h"
        -:    7:
        -:    8:using namespace std;
        -:    9:
function main called 1 returned 100% blocks executed 53%
        1:   10:int main(int argc, char** argv) {
        -:   11:
        1:   12:    if(argc < 2) {
        1:   12-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   13:        cerr << "Please provides name of input and output files";
    %%%%%:   13-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   14:        return 1;
    %%%%%:   14-block  0
        -:   15:    }
        -:   16:
        2:   17:    ifstream in(argv[1]);
        1:   17-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   17-block  1
call    3 returned 1
    $$$$$:   17-block  2
call    4 never executed
        1:   18:    if(!in) {
        1:   18-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   18-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    #####:   19:        cerr <<"Unable to open " << argv[1] << " for input";
    %%%%%:   19-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   19-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:   19-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:   20:        return 2;
    %%%%%:   20-block  0
        -:   21:    }
        -:   22:
        -:   23:
        1:   24:    std::istreambuf_iterator<char> eos;
        2:   25:    std::string inputString(std::istreambuf_iterator<char>(in), eos);
        1:   25-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1:   25-block  1
call    5 returned 1
call    6 returned 1
    $$$$$:   25-block  2
    $$$$$:   25-block  3
    $$$$$:   25-block  4
call    7 never executed
        -:   26:
        1:   27:    Lexer* lexer = new Lexer();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   27-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$:   27-block  1
call    6 never executed
        -:   28:
        1:   29:    lexer->Run(inputString);
        1:   29-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   30:
        2:   31:    Parser parser(lexer->returnTokens());
        1:   31-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   31-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
    $$$$$:   31-block  2
    $$$$$:   31-block  3
call    7 never executed
        2:   32:       string tempString = parser.datalogParse();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$:   32-block  0
call    4 never executed
        -:   33:
        1:   34:    Interpreter inter(parser.getDatalog());
        1:   34-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   34-block  1
call    4 never executed
        1:   35:    cout << inter.initiateRules();
        1:   35-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   35-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   35-block  2
call    6 returned 1
    $$$$$:   35-block  3
call    7 never executed
    $$$$$:   35-block  4
        1:   36:    cout << "Query Evaluation" << endl;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   36-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   37:    cout << inter.initiateQueries();
        1:   37-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   37-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   37-block  2
call    6 returned 1
    $$$$$:   37-block  3
call    7 never executed
    $$$$$:   37-block  4
        -:   38:
        -:   39:    // TODO
        -:   40:
        1:   41:    delete lexer;
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   41-block  0
call    2 returned 1
call    3 returned 1
        -:   42:
        1:   43:    return 0;
        1:   43-block  0
call    0 returned 1
        -:   44:}
